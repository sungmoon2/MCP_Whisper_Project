#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from gtts import gTTS
import os
import time

def create_45min_meeting_audio():
    """45분 분량의 상세한 미팅 녹음 파일 생성"""
    
    # 45분 분량의 상세한 미팅 스크립트 (약 7500자)
    meeting_script = """
안녕하세요 여러분. 오늘은 우리 AI 기반 회의록 자동화 시스템 프로젝트에 대한 중요한 논의를 위해 모였습니다. 

먼저 프로젝트 현황부터 살펴보겠습니다. 지난주까지 Whisper 모델을 이용한 STT 기능은 성공적으로 구현했고, 현재 Claude MCP 연동 작업을 진행하고 있습니다. 특히 한국어 음성 인식 성능이 예상보다 우수해서 고무적입니다.

김대리님, 웹앱 프론트엔드 개발 현황은 어떻게 되고 있나요?

네, 현재 사용자 인터페이스의 기본 틀은 완성된 상태입니다. 파일 업로드 기능, 모델 선택 옵션, 그리고 진행상황 표시 기능까지 구현했습니다. 다만 사용자 경험 개선을 위해 좀 더 직관적인 디자인으로 수정이 필요할 것 같습니다.

좋습니다. 그럼 다음 단계로 넘어가서, 박과장님이 담당하고 계신 Google Calendar API 연동은 어떤 상황인가요?

OAuth 2.0 인증 구현은 완료했고, 기본적인 이벤트 생성 기능도 테스트를 마쳤습니다. 다만 중복 이벤트 방지 로직과 시간대 처리 부분에서 몇 가지 이슈가 있어서 추가 작업이 필요합니다. 특히 한국 시간대와 UTC 변환 과정에서 간헐적으로 오류가 발생하고 있습니다.

시간대 문제는 중요한 이슈네요. 이 부분은 반드시 해결해야 할 것 같습니다. 

네, 정확히 그 부분 때문에 며칠 더 시간이 필요할 것 같습니다. 

그렇다면 이제 구체적인 일정을 논의해보겠습니다. 먼저 다음 주 화요일, 그러니까 6월 12일 오전 9시에 프로젝트 킥오프 미팅을 진행하겠습니다. 이 미팅에서는 전체 팀원이 참석해서 최종 개발 일정을 확정하고 각자의 역할을 명확히 하는 시간을 갖겠습니다. 회의실 예약은 제가 할게요.

그 다음은 6월 18일 화요일 오후 2시에 클라이언트 프레젠테이션이 예정되어 있습니다. 이 자리에서는 현재까지의 개발 성과를 시연하고 클라이언트의 피드백을 받는 중요한 시간이 될 것입니다. 발표 자료 준비는 누가 담당할까요?

제가 준비하겠습니다. 기술적인 부분은 개발팀에서 도움을 받고요.

좋습니다. 이정우 팀장님이 발표 자료를 준비해주시면 됩니다.

그리고 6월 25일 수요일 오전 10시에는 중간 리뷰 미팅을 가져야겠습니다. 이때까지 핵심 기능들이 모두 구현되어야 하므로, 각자 담당 부분을 점검하는 시간으로 활용하겠습니다. 혹시 지연되는 부분이 있으면 미리 알려주세요.

네, 알겠습니다. 웹앱 부분은 그때까지 완료할 수 있을 것 같습니다.

저도 Calendar API 부분은 문제없이 완료하겠습니다.

다음으로 7월 2일 수요일 오후 3시에는 데모 준비 세션을 진행하겠습니다. 이 시간에는 실제 시연을 위한 리허설을 하고, 예상 질문들에 대한 답변도 준비해보겠습니다. 특히 기술적인 세부사항에 대한 질문이 많이 나올 것 같으니 미리 준비해두시기 바랍니다.

7월 8일 화요일 오전 11시에는 최종 발표가 있습니다. 이는 교수님과 다른 팀들 앞에서 진행되는 공식적인 발표이므로 모든 팀원이 참석해야 합니다. 발표 시간은 20분이고 질의응답까지 포함해서 30분 정도로 예상됩니다.

그 이후 7월 15일 화요일 오후 4시에는 프로젝트 마감 점검 미팅을 하겠습니다. 최종 코드 정리, 문서화 작업, 그리고 제출 준비를 위한 마지막 점검 시간입니다. 이때까지 모든 작업이 완료되어야 하므로 일정 관리에 신경써주시기 바랍니다.

마지막으로 7월 20일 일요일 오후 1시에는 프로젝트 회고 미팅을 진행하겠습니다. 이 프로젝트를 통해 배운 점들, 개선할 점들, 그리고 향후 발전 방향에 대해 논의하는 시간을 갖겠습니다. 이는 선택사항이지만 가능하면 모두 참석해주시면 좋겠습니다.

이제 기술적인 부분을 좀 더 자세히 논의해보겠습니다. 

먼저 Whisper 모델 성능 최적화에 대해 이야기해보겠습니다. 현재 small, medium, large 모델을 모두 테스트해봤는데, 한국어의 경우 medium 모델이 속도와 정확도 면에서 가장 균형잡힌 성능을 보여주고 있습니다. 다만 긴 회의 녹음의 경우에는 large 모델을 사용하는 것이 더 나은 결과를 얻을 수 있을 것 같습니다.

사용자가 선택할 수 있도록 옵션을 제공하는 것은 어떨까요?

좋은 아이디어입니다. 파일 크기나 예상 처리 시간에 따라 권장 모델을 자동으로 제안하고, 사용자가 최종 선택할 수 있도록 하면 좋겠네요.

그리고 Claude MCP 연동 부분에서 중요한 점이 있습니다. 텍스트에서 일정을 추출할 때 자연어 처리의 정확도가 핵심인데, 날짜와 시간 표현이 다양하다는 점을 고려해야 합니다. "다음 주 화요일", "오후 2시", "이번 달 말" 같은 상대적 표현들을 정확히 파싱하는 것이 중요합니다.

맞습니다. 현재 날짜를 기준으로 상대적 날짜를 계산하는 로직이 필요하겠네요.

정확히 그런 부분들입니다. 그리고 회의에서 언급되는 모든 날짜가 실제 일정인 것은 아니므로, 컨텍스트를 분석해서 실제 약속인지 단순한 언급인지 구분하는 것도 중요합니다.

또한 사용자 인터페이스 측면에서도 개선할 부분들이 있습니다. 현재는 단순히 파일을 업로드하고 결과를 받는 형태인데, 중간 과정을 사용자가 확인할 수 있도록 하면 좋겠습니다. 예를 들어 STT 진행률, 텍스트 분석 단계, 일정 추출 단계 등을 단계별로 표시하는 것입니다.

진행률 표시 기능은 사용자 경험에 정말 중요하죠. 특히 긴 파일의 경우 처리 시간이 오래 걸리니까요.

네, 그리고 에러 처리도 중요합니다. 파일 형식이 지원되지 않거나, 음질이 너무 나쁘거나, 네트워크 문제가 발생했을 때 사용자에게 명확한 피드백을 제공해야 합니다.

보안 측면에서도 고려할 점들이 있습니다. 업로드된 음성 파일들을 어떻게 관리할 것인지, 개인정보가 포함된 회의 내용을 어떻게 보호할 것인지에 대한 정책이 필요합니다.

좋은 지적입니다. 일정 시간 후 자동 삭제하는 기능을 추가하면 어떨까요?

그것도 좋은 방법이겠네요. 사용자가 선택할 수 있도록 하면 더 좋을 것 같습니다.

이제 성능 최적화에 대해서도 논의해봅시다. 현재 GPU를 활용한 처리를 하고 있는데, 동시에 여러 파일을 처리할 때의 리소스 관리도 고려해야 합니다. 큐 시스템을 도입해서 순차적으로 처리하는 것이 안정적일 것 같습니다.

맞습니다. 그리고 캐싱 시스템도 고려해볼 수 있겠네요. 같은 파일이 재처리되는 경우 이전 결과를 활용할 수 있도록요.

실제 사용 시나리오도 생각해봐야겠습니다. 주로 어떤 종류의 회의에서 사용될 것인지, 파일 크기는 보통 어느 정도인지, 얼마나 많은 일정이 일반적으로 언급되는지 등을 고려해서 시스템을 최적화해야 합니다.

제가 몇 가지 실제 회의 샘플을 수집해서 테스트해볼까요?

좋은 아이디어입니다. 다양한 상황의 회의 데이터로 테스트해보면 실제 성능을 더 정확히 평가할 수 있을 것입니다.

마지막으로 문서화 작업에 대해서도 이야기해봅시다. 사용자 매뉴얼, 개발자 문서, API 문서 등이 필요할 것 같습니다. 특히 MCP 도구들의 사용법에 대한 상세한 가이드가 중요할 것 같습니다.

네, 문서화는 정말 중요한 부분이죠. 사용자가 쉽게 이해할 수 있도록 단계별로 설명하고, 스크린샷도 포함하면 좋겠습니다.

그리고 향후 확장성도 고려해야겠습니다. 현재는 Google Calendar만 지원하지만, 나중에 다른 캘린더 서비스나 작업 관리 도구들도 연동할 수 있도록 확장 가능한 구조로 설계하면 좋겠습니다.

모듈화된 구조로 설계하면 나중에 새로운 서비스를 추가하기 쉬울 것 같습니다.

정확히 그런 방향으로 생각하고 있습니다. 플러그인 방식으로 확장할 수 있도록 하면 더욱 유용한 시스템이 될 것 같습니다.

오늘 논의한 내용들을 정리해보면, 앞으로 2주 동안 해야 할 일들이 명확해졌습니다. 각자 맡은 부분을 차질없이 진행해주시고, 문제가 생기면 즉시 공유해주시기 바랍니다.

특히 일정 관리가 중요합니다. 6월 12일 킥오프 미팅까지는 이제 4일밖에 남지 않았으니, 그때까지 현재 작업을 정리해주시기 바랍니다.

네, 알겠습니다. 각자 진행상황을 내일까지 이메일로 공유하겠습니다.

좋습니다. 그럼 오늘 회의는 여기서 마치겠습니다. 모두 수고하셨습니다.
"""

    # 파일명과 경로 설정
    output_dir = "/home/minsujo/whisper_project/data/input"
    
    # 디렉토리가 없으면 생성
    os.makedirs(output_dir, exist_ok=True)
    
    output_file = os.path.join(output_dir, "meeting_45min_detailed.mp3")
    
    print("🎙️ 45분 분량의 상세한 미팅 녹음 파일을 생성 중입니다...")
    print(f"📊 예상 텍스트 길이: {len(meeting_script):,}자")
    print(f"💾 저장 위치: {output_file}")
    
    try:
        # gTTS로 음성 파일 생성 (느린 속도로 45분에 맞춤)
        print("🔄 gTTS 처리 중... (시간이 다소 걸릴 수 있습니다)")
        tts = gTTS(text=meeting_script, lang='ko', slow=True)  # slow=True로 긴 시간 확보
        
        # 파일 저장
        tts.save(output_file)
        
        # 파일 정보 확인
        file_size = os.path.getsize(output_file)
        file_size_mb = file_size / (1024 * 1024)
        
        print(f"✅ 45분 분량 미팅 녹음 파일 생성 완료!")
        print(f"📁 파일 경로: {output_file}")
        print(f"📏 파일 크기: {file_size_mb:.1f}MB")
        print(f"📝 포함된 일정: 7개")
        print("\n📅 포함된 일정 목록:")
        print("1. 6월 12일 오전 9시 - 프로젝트 킥오프 미팅")
        print("2. 6월 18일 오후 2시 - 클라이언트 프레젠테이션")
        print("3. 6월 25일 오전 10시 - 중간 리뷰 미팅")
        print("4. 7월 2일 오후 3시 - 데모 준비 세션")
        print("5. 7월 8일 오전 11시 - 최종 발표")
        print("6. 7월 15일 오후 4시 - 프로젝트 마감 점검")
        print("7. 7월 20일 오후 1시 - 프로젝트 회고 미팅")
        
        return output_file
        
    except Exception as e:
        print(f"❌ 오류 발생: {e}")
        return None

if __name__ == "__main__":
    create_45min_meeting_audio()
